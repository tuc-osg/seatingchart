\NeedsTeXFormat{LaTeX2e}[2022-06-01]
\def\packagename{tucseating}
\ProvidesPackage{\packagename}[2025-08-01 v0.1]
\RequirePackage{luacode}
\RequirePackage{translator}
\IfFormatAtLeastTF{2022/06/01}{}{
  \PackageError{\packagename}{
    \packagename requires at least the TeX format \MessageBreak
    from 2022/06. \MessageBreak
  }{Update your LaTeX.}
}
\RequirePackage{tikz}
\RequirePackage{etoolbox}
\RequirePackage{iftex}               % fÃ¼r Test auf Lua(La)TeX
\ifLuaTeX\else
 \PackageError{\packagename}{
   LuaLaTeX is required to use this package. \MessageBreak
   Sorry!
}{Use LuaLaTex.}
\fi
\let\IfToggle=\iftoggle
\newtoggle{tucs@rectshapt}
\newtoggle{tucs@rnleft}
\newtoggle{tucs@rnright}
\newtoggle{tucs@room}
\DeclareKeys[tucseating]{
  room.code:n = {
    \gdef\tucs@room{#1}
    \toggletrue{tucs@room}
  },
  room.usage = load,
  shape.choice: ,
  shape/arc.code:n = {\togglefalse{tucs@rectshapt}},
  shape/rectangle.code:n = {\toggletrue{tucs@rectshapt}},
  shape.usage = preamble,
  rows.store = \tucs@rows,
  rows.usage = preamble,
  seats per row.store = \tucs@seatsperrow,
  seats per row.usage = preamble,
  blackboard.if = tucs@blackboard,
  rownumbers.choice:,
  rownumbers/left.code = { \toggletrue{tucs@rnleft} },
  rownumbers/right.code = { \toggletrue{tucs@rnright} },
  rownumbers/both.code:n = {
    \toggletrue{tucs@rnleft}\toggletrue{tucs@rnright}
  },
  rownumbers/none.code:n = {
    \togglefalse{tucs@rnleft}\togglefalse{tucs@rnright}
  },
  rownumber distance.store= \tucs@rnsep,
  %aisle.store = \tucs@aisle,
  seat empty.store =\tucs@sc@empty,
  seat empty border.store = \tucs@sc@emptyborder,
  seat empty text.store = \tucs@sc@emptytext,
  seat empty font.store = \tucs@s@emptyfont,
  seat assigned.store = \tucs@sc@assigned,
  seat assigned border.store = \tucs@sc@assignedborder,
  seat assigned text.store = \tucs@sc@assignedtext,
  seat assigned font.store = \tucs@s@assignedfont,
  seat background.code:n = {
    \gdef\tucs@sc@empty{#1}
    \gdef\tucs@sc@assigned{#1}
  },
  seat text.code:n = {
    \gdef\tucs@sc@emptytext{#1}
    \gdef\tucs@sc@assignedtext{#1}
  },
  seat border.code:n = {
    \gdef\tucs@sc@emptyborder{#1}
    \gdef\tucs@sc@assignedborder{#1}
  },
  seat font.code:n = {
    \gdef\tucs@s@emptyfont{#1}
    \gdef\tucs@s@assignedfont{#1}
  }
}
% defaults
\SetKeys[tucseating]{
  % invalid layout
  rows = 0,
  seats per row = 0,
  % standard style
  seat empty border=lightgray,
  seat empty =lightgray!20,
  seat empty text =lightgray!20,
  seat assigned = lightgray!30,
  seat assigned border = black,
  seat font = \tiny,
  seat assigned text = black,
  blackboard = false,
  rownumber distance = 2pt
}
\ProcessKeyOptions
\NewDocumentCommand{\tucsInitSeating}{o}{
  \luadirect{require("tucseating.lua")}
  \luadirect{initRec(\tucs@rows,\tucs@seatsperrow)}
}
\NewDocumentCommand{\tucsConfig}{m}{
  \SetKeys[tucseating]{#1}%
  \tucs@configtikz%
}
\newcommand{\tucsrownumformat}[1]{
  \tiny#1
}
\newcommand{\tucsassignedlabelformat}[1]{%
  \small#1
}
\newcommand{\tucemptylabelformat}[1]{%
}

\newcommand\tucs@configtikz{
  \tikzset{
    empty seat/.style={
      draw=\tucs@sc@emptyborder,
      fill=\tucs@sc@empty,
      font=\tucs@s@emptyfont,
      text=\tucs@sc@empty,
      inner sep=0.5pt
    },
    empty label/.style={
      text=\tucs@sc@emptytext,
      font=\tucs@s@emptyfont
    },
    assigned seat/.style={
      draw=\tucs@sc@assignedborder,
      fill=\tucs@sc@assigned,
      text=\tucs@sc@assigned,
      font=\tucs@s@assignedfont,
      inner sep=0.5pt
    },
    assigned label/.style={
      text=\tucs@sc@assignedtext,
      font=\tucs@s@assignedfont
    }
  }
}
\NewDocumentCommand{\tucsDrawSeating}{sO{}}{
  \tucs@configtikz
  \newlength\tucsseatwidth
  \newlength\tucsseatheight
  \newlength\tucsremainingspace
  \newlength\tucsrnlength
  \IfBooleanTF{#1}{
    \settowidth{\tucsseatwidth}{xxx}
    \settoheight{\tucsseatheight}{Xy}
  }{
    \setlength{\tucsremainingspace}{\linewidth}
    \typeout{Linewidth: \the\linewidth}
    \settowidth{\tucsrnlength}{\tucsrownumformat{99}}
    \typeout{Numswidth: \the\tucsrnlength}
    \iftoggle{tucs@rnleft}{\addtolength{\tucsremainingspace}{\dimeval{-\tucsrnlength-\tucs@rnsep}}}{}
    \iftoggle{tucs@rnright}{\addtolength{\tucsremainingspace}{\dimeval{-\tucsrnlength-\tucs@rnsep}}}{}
    \typeout{Remaining: \the\tucsremainingspace}
    \setlength{\tucsseatwidth}{\dimeval{\tucsremainingspace/(\tucs@seatsperrow) - 2pt}}
    \typeout{Seatwidth: \the\tucsseatwidth}
    \typeout{total: \dimeval{(\tucsseatwidth+2pt)*\tucs@seatsperrow + \tucsrnlength*2
        % *\tucs@seatsperrow + 2*
      }}
 
    \setlength{\tucsremainingspace}{\dimeval{\pagegoal-\pagetotal}}
    \setlength{\tucsseatheight}{\dimeval{\tucsremainingspace/(\tucs@rows + 2) - 2pt}}
   
  }
  \luadirect{seatDim(\luastring{\tucsseatwidth},\luastring{\tucsseatheight})}
  \begin{tikzpicture}[x=\tucsseatwidth+2pt,y=\tucsseatheight+2pt]
      \iftucs@blackboard
          \node[rectangle, draw,minimum width=0.4\textwidth] at (0,-2) {Tafel};
      \fi
      \iftoggle{tucs@rnleft}{
            \foreach \r in {1,..., \tucs@rows} {
              \node[anchor=east,xshift=-\fpeval{\tucsseatwidth/2+\tucs@rnsep}] at (\fpeval{(1-\tucs@seatsperrow)/2},\r-1) {\tucsrownumformat{\r}};
            }
          }{}
     \iftoggle{tucs@rnright}{
            \foreach \r in {1,..., \tucs@rows} {
              \node[anchor=east,xshift=\fpeval{\tucsseatwidth/2+\tucs@rnsep+\tucsrnlength}] at (\fpeval{(\tucs@seatsperrow-1)/2},\r-1) {\tucsrownumformat{\r}};
            }
          }{}
      \luadirect{drawSeats()}
    \end{tikzpicture}
}

\NewDocumentCommand{\removeSeatAt}{m m}{
  \luadirect{removeSeatAt(#1,#2)}
}

\NewDocumentCommand{\assignSeatAt}{m m m}{
  \luadirect{assignSeatAt(#1,#2,\luastring{#3})}
}

\NewDocumentCommand{\setRowAsAisle}{m}{
  
}
% Now we can start.
% Check...
% ... if there exist a layout
\ifboolexpr{
      (test {\ifnumcomp{\tucs@rows}{=}{0}} or
       test {\ifnumcomp{\tucs@seatsperrow}{=}{0}}
      ) and not togl {tucs@room}         
}{
  \PackageError{\packagename}{
    No room is set up}{
    Provide room layout}
}{}
\IfToggle{tucs@room}{
  % .. if the room file exist
  \InputIfFileExists{\tucs@room.tsr}{
    % ... if room *and* layout options are given
    \ifboolexpr{
          test {\ifnumcomp{\tucs@rows}{>}{0}} or
          test {\ifnumcomp{\tucs@seatsperrow}{>}{0}}
    }{
      \PackageWarningNoLine{\packagename}{You provided room as well as layout
        option(s).\MessageBreak
        The later will be ignored}
    }{}
  }{
       \PackageError{\packagename}{Can't open file '\tucs@room.tsr'}{Check if the room is
         correct.}
   }
}{}
% ... for usefull layout parameter
\ifboolexpr{
       test {\ifnumcomp{\tucs@rows}{<}{1}} or
       test {\ifnumcomp{\tucs@seatsperrow}{<}{1}}
      }{
        \PackageError{\packagename}{Invalid layout option:\MessageBreak
          can't be smaller than 1}{
          Set correct layout options}
        }{}
\typeout{Base layout: \tucs@rows x \tucs@seatsperrow}
 
\usetikzlibrary{shapes.geometric}
