\ExplSyntaxOn
\def\packagename{
  %% Name:
  tucseating
}
\def\packagedate{
  %% Date:
  2025-07-04
}
\def\packageversion{
  %% Version:
  v0.2
}
\ExplSyntaxOff
  %% Author:      Matthias Werner
  %% Description: Seatings schemes (for Chemnitz
  %%              University of Technology)
  %% License:     GPLv3
\NeedsTeXFormat{LaTeX2e}[2022-06-01]

\ProvidesPackage{\packagename}[\packagedate\space \packageversion]
\RequirePackage{translator}
\IfFormatAtLeastTF{2022/06/01}{}{
  \PackageError{\packagename}{
    \packagename requires at least the TeX format \MessageBreak
    from 2022/06. \MessageBreak
  }{Update your LaTeX.}
}
\RequirePackage{etoolbox}
\ExplSyntaxOn
\sys_if_engine_luatex:TF{}{
 \PackageError{\packagename}{
   LuaLaTeX~is~required~to~use~this~package.\MessageBreak
   Sorry!
}{Use~LuaLaTex.} 
}
\RequirePackage{luacode}
\ExplSyntaxOff
\newtoggle{tucs@rectshapt}
\newtoggle{tucs@rnleft}
\newtoggle{tucs@rnright}
\newtoggle{tucs@room}
\DeclareKeys[tucseating]{
  shape/arc.code:n = {\togglefalse{tucs@rectshapt}},
  shape/rectangle.code:n = {\toggletrue{tucs@rectshapt}},
  shape.usage = preamble,
  shape.initial:n = rectangle,
  rows.code:n = {
    \ifdef{\tucs@rows}{
      \ifnumcomp{\tucs@rows}{>}{0}{
        \PackageWarningNoLine{\packagename}{Overwriting number of rows.\MessageBreak
          You propably provided both, a room *and*\MessageBreak layout options.\MessageBreak
          Prepare for trouble}
      }{}
    }{}
    \gdef\tucs@rows{#1}
  },
  rows.usage = preamble,
  rows.initial:n = 0,
  seats per row.code = {
    \ifdef{\tucs@seatsperrow}{
      \ifnumcomp{\tucs@seatsperrow}{>}{0}{
        \PackageWarningNoLine{\packagename}{Overwriting seats per
          row.\MessageBreak
          You propably provided both, a room *and*\MessageBreak layout options.\MessageBreak
          Prepare for trouble}
      }{}
    }{}
    \gdef\tucs@seatsperrow{#1}
  },
  seats per row.usage = preamble,
  seats per row.initial:n = 0,
  room.choice:,
  room/unknown.code:n={
    \PackageError{\packagename}{
      Room #1 is not in the database}{Check if the room name is correct or define an own room.}
  },
  room.usage = load,
  init.code:n={
    \toggletrue{tucs@room}
    \tucsInitSeating
  },
  init.usage = load,
  remove.code:n = {%
    \tucsRemoveSeats{#1}
  },
  remove.usage = preamble,
  shape.choice:,
  aisle.code:n={
    \keySetAisle{#1}
  },
  blackboard.if = tucs@blackboard,
  blackboard.initial:n = false,
  rownumbers.choice:,
  rownumbers/left.code = { \toggletrue{tucs@rnleft} },
  rownumbers/right.code = { \toggletrue{tucs@rnright} },
  rownumbers/both.code:n = {
    \toggletrue{tucs@rnleft}\toggletrue{tucs@rnright}
  },
  rownumbers/none.code:n = {
    \togglefalse{tucs@rnleft}\togglefalse{tucs@rnright}
  },
  rownumbers.initial:n=none,
  seat neighbor distance.store =\tucs@sdist@x,
  row distance.store =\tucs@sdist@y,
  seat distance.meta:n = {
    seat neighbor distance=#1,
    row distance=#1
  },
  seat distance.initial:n=2pt,
  rownumbers.initial:n = none,
  rownumber distance.store= \tucs@rnsep,
  rownumber distance.initial:n = 2pt,
  rownumber font.store = \tucs@rnfont,
  rownumber font.initial:n = \tiny,
  rownumber color.store = \tucs@rncolor,
  rownumber color.initial:n = darkgray,
  empty seat background color.store =\tucs@sc@empty,
  empty seat background color.initial:n = lightgray!20,
  empty seat border color.store = \tucs@sc@emptyborder,
  empty seat border color.initial:n = lightgray,
  empty seat label color.store = \tucs@sc@emptytext,
  empty seat label color.initial:n = lightgray!30,
  empty seat label font.store = \tucs@s@emptyfont,
  assigned seat background color.store = \tucs@sc@assigned,
  assigned seat background color.initial:n = lightgray!30,
  assigned seat border color.store = \tucs@sc@assignedborder,
  assigned seat border color.initial:n = black,
  assigned seat label color.store = \tucs@sc@assignedtext,
  assigned seat label color.initial:n = black,
  assigned seat label font.store = \tucs@s@assignedfont,
  seat background color.meta:n = {
    empty seat background color=#1,
    assigned seat background color =#1
  },
  seat label color.meta:n = {
    empty seat label color = #1,
    assigned seat label color = #1
  },
  seat border color.meta:n = {
    empty seat border color = #1,
    assigned seat border color = #1
  },
  seat label font.initial:n = \small,
  seat label font.meta:n = {
    empty seat label font=#1,
    assigned seat label font = #1
  }
}
\NewDocumentCommand{\tucsDeclareRoom}{m m}{%
  \DeclareKeys[tucseating]{room/#1.meta:n={#2}}%
}
\NewDocumentCommand{\tucsRemoveSeatAt}{m m}{
  \luadirect{removeSeatAt(#1,#2)}
}
\NewDocumentCommand{\tucs@removeSeat}{>{\SplitArgument{1}{,}}m}{
  \tucsRemoveSeatAt#1
}
\NewDocumentCommand{\tucsRemoveSeats}{>{\SplitList{,}} m}{
  \ProcessList{#1}{\tucs@removeSeat}
} 
\NewDocumentCommand{\tucsAssignSeatAt}{m m m}{
  \luadirect{assignSeatAt(#1,#2,\luastring{#3})}
}
\NewDocumentCommand{\tucs@ParseRows}{m}{
}
\def\tucs@parserange#1-#2\relax{%
  \def\@firstval{\ifx\relax#1\relax1\else#1\fi}%
  \def\@lastval{\ifx\relax#2\relax\tucs@rows\else#2\fi}%
}
\newcommand{\keySetAisle}[1]{
  \tucsSetAisle[-]{#1}
}
\NewDocumentCommand{\tucsSetAisle}{O{-}m}{%
  \begingroup
  \edef\@tmp{#1}%
  \expandafter\tucs@parserange\@tmp\relax
  \luadirect{removeAisle(#2,\@firstval,\@lastval)}
  \endgroup
}
\NewDocumentCommand{\tucsInitSeating}{o}{
  \IfValueT{#1}{}
  \luadirect{require("tucseating.lua")}
  \iftoggle{tucs@rectshapt}{
    \luadirect{initSeating(\tucs@rows,\tucs@seatsperrow,\luastring{rect})}
  }{
  \luadirect{initSeating(\tucs@rows,\tucs@seatsperrow,\luastring{arc})}
  }
}
\InputIfFileExists{rooms1.tsr}{}{
  \PackageError{\packagename}{
    Can't find room data. This shouldn't happen.}{Please report to the package maintainer.}
}

% defaults

\ProcessKeyOptions

\NewDocumentCommand{\tucsConfig}{m}{%
  \SetKeys[tucseating]{#1}%
  \tucs@configtikz%
}
\ExplSyntaxOn
\newcommand\tucs@configtikz{%
  \tikzset{%
    empty~seat/.style={
      draw=\tucs@sc@emptyborder,
      fill=\tucs@sc@empty,
      font=\tucs@s@emptyfont,
      text=\tucs@sc@empty,
      inner~sep=0pt
    },
    empty~label/.style={
      text=\tucs@sc@emptytext,
      font=\tucs@s@emptyfont
    },
    assigned~seat/.style={
      draw=\tucs@sc@assignedborder,
      fill=\tucs@sc@assigned,
      text=\tucs@sc@assigned,
      font=\tucs@s@assignedfont,
      inner~sep=0pt
    },
    assigned~label/.style={
      text=\tucs@sc@assignedtext,
      font=\tucs@s@assignedfont
    },
    rownumber/.style={
      font=\tucs@rnfont,
      text=\tucs@rncolor,
      anchor=east
    }%
  }%
}
\DeclareKeys[tucsdrawing]{
  seat~width.code:n={
    \setlength{\tucsseatwidth}{#1}
  },
  seat~height.code:n={
    \setlength{\tucsseatheight}{#1}
  }
}
\NewDocumentCommand{\tucsDrawSeating}{sO{}}{%
  \par\noindent%
  \tucs@configtikz%
  \newlength\tucsseatwidth%\settowidth{\tucsseatwidth}{xxxx}%
  \newlength\tucsseatheight%\settoheight{\tucsseatheight}{Xy}%
  \newlength\tucsremainingspace%
  \newlength\tucsrnlength%
  \IfValueT{#2}{% 
    \SetKeys[tucsdrawing]{#2}%
  }
  \IfBooleanF{#1}{%
   \setlength{\tucsremainingspace}{\linewidth}%
    \settowidth{\tucsrnlength}{\tucsrownumformat{99}}%
    %\typeout{Linewidth: \the\linewidth~(\the\tucsremainingspace)}
    %\typeout{Numswidth: \the\tucsrnlength~(seats:~\tucs@seatsperrow)}
    %\typeout{********* Remaining start: \the\tucsremainingspace}%
    \iftoggle{tucs@rnleft}{\addtolength{\tucsremainingspace}{-\dimeval{\tucsrnlength+\tucs@rnsep}}}{}%
    %\typeout{********* Remaining~left~considered: \the\tucsremainingspace}%
    \iftoggle{tucs@rnright}{\addtolength{\tucsremainingspace}{-\dimeval{\tucsrnlength+\tucs@rnsep}}}{}%
    %\typeout{********* Remaining~right~considered: \the\tucsremainingspace}%
    \setlength{\tucsseatwidth}{\dimeval{\tucsremainingspace/(\tucs@seatsperrow) - \tucs@sdist@x}}
    %\typeout{Seatwidth: \the\tucsseatwidth}
    %\typeout{total: \dimeval{(\tucsseatwidth+2pt)*\tucs@seatsperrow + \tucsrnlength*2 + \tucs@rnsep*2}}
    %\typeout{********* Total: \the\pagetotal\ Goal: \the\pagegoal\ Height: \the\textheight}%
    \ifdimequal{\pagetotal}{0pt}{%
      \setlength{\tucsremainingspace}{\textheight}%
    }{%
      \setlength{\tucsremainingspace}{\dimeval{\pagegoal-\pagetotal}}%
    }%
    %\typeout{********* Total: \the\pagetotal\ Goal: \the\pagegoal\ Height: \the\textheight}%
    %\typeout{********* Remaining: \the\tucsremainingspace\ Width: \the\textwidth\ Height: \the\textheight}%
    \iftucs@blackboard%
      \setlength{\tucsseatheight}{\dimeval{\tucsremainingspace/(\tucs@rows + 2) - \tucs@sdist@y}}%
    \else%
      \setlength{\tucsseatheight}{\dimeval{\tucsremainingspace/\tucs@rows - \tucs@sdist@y}}%
    \fi%
    % A seat that is deeper than it is wide looks a bit silly.
    \ifdimcomp{\tucsseatheight}{>}{\tucsseatwidth}{\setlength{\tucsseatheight}{\tucsseatwidth}}{}%
  }%
  %\typeout{*********~Seatwidth:~\the\tucsseatwidth, Seatheight:~\the\tucsseatheight}%
  \luadirect{seatDim(\luastring{\tucsseatwidth},\luastring{\tucsseatheight})}%
  \begin{tikzpicture}[x=\tucsseatwidth+\tucs@sdist@x,y=\tucsseatheight+\tucs@sdist@y,#2]
      \iftucs@blackboard%
         \node[rectangle, draw,minimum~width=0.4\textwidth] at (0,-2) {Tafel};
      \fi
      \iftoggle{tucs@rectshapt}{
        \iftoggle{tucs@rnleft}{
          \foreach \r in {1,..., \tucs@rows} {
            \node[rownumber,xshift=-\fpeval{\tucsseatwidth/2+\tucs@rnsep}] at (\fpeval{(1-\tucs@seatsperrow)/2},\r-1) {\tucsrownumformat{\r}};
          }
        }{}
        \iftoggle{tucs@rnright}{
          \foreach \r in {1,..., \tucs@rows} {
            \node[rownumber,xshift=\fpeval{\tucsseatwidth/2+\tucs@rnsep+\tucsrnlength}] at (\fpeval{(\tucs@seatsperrow-1)/2},\r-1) {\tucsrownumformat{\r}};
          }
        }{}
      }{}
      \luadirect{drawSeats()}
    \end{tikzpicture}
}

\newbox\tucsoutbox
\NewDocumentCommand{\tucsSeatingList}{s m}{
  \luadirect{generateseatlist(\luastring{#2})}
}
\ExplSyntaxOff

\DeclareKeys[tucsseatingscheme]{
  empty seat background color.store =\tucs@sc@empty,
  empty seat border color.store = \tucs@sc@emptyborder,
  empty seat label color.store = \tucs@sc@emptytext,
  empty seat label font.store = \tucs@s@emptyfont,
  assigned seat background color.store = \tucs@sc@assigned,
  assigned seat border color.store = \tucs@sc@assignedborder,
  assigned seat label color.store = \tucs@sc@assignedtext,
  assigned seat label font.store = \tucs@s@assignedfont,
  seat background color.meta:n = {
    empty seat background color=#1,
    assigned seat background color =#1
  },
  seat label color.meta:n = {
    empty seat label color = #1,
    assigned seat label color = #1
  },
  seat border color.meta:n = {
    empty seat border color = #1,
    assigned seat border color = #1
  },
  seat label font.meta:n = {
    empty seat label font=#1,
    assigned seat label font = #1
  },
  row sep.store = \tss@rowsep,
  row sep.initial:n = 2,
  start row.store = \tss@startrow,
  start row.initial:n=1,
  end row.store = \tss@endrow,
  end row.initial:n = \tucs@rows,
  row restart after.store= \tss@rowrestart,
  row restart after.initial:n = 100,%should be sufficient
  aisle counts.store = \tss@aislecnt,
  aisle counts.initial:n = 1,
  aisle restarts scheme.choice:,
  aisle restarts scheme/true.store=\tss@aislerestart,
  aisle restarts scheme/false.store=\tss@aislerestart,
  aisle restarts scheme.default:n = true,
  aisle restarts scheme.initial:n = false,
  ignore aisle.meta:n = {
    aisle counts=0
  },
  rtol.choice:,
  rtol/true.store = \tss@rtol,
  rtol/false.store = \tss@rtol,,
  rtol.default:n = true,
  rtol.initial:n = false,
  ignore removed seats.choice:,
  ignore removed seats/true.store=\tss@ignoreremoved,
  ignore removed seats/false.store=\tss@ignoreremoved,
  ignore removed seats.default:n = true,
  ignore removed seats.initial:n = false,
  assigned seat label.store=\tss@as@format,
  assigned seat label.initial:n=m{{\,}}D, 
  pattern.store=\tss@pattern,
  scheme.choice:,
  scheme/1x1.meta:n={
    row sep=1,
    pattern=X,
  },
  scheme/all.meta:n={
    scheme=1x1
  },
  scheme/2x2.meta:n={
    row sep=2,
    pattern=X-,
    aisle restarts scheme=true,
    row restart after=100
  },
  scheme/simple.meta:n={
    scheme=2x2
  },
  scheme/2x3.meta:n={
    row sep=2,
    pattern=X--,
    aisle restarts scheme=true,
    row restart after=100
  },
  scheme/sixpack.meta:n={
    scheme=2x3
  },
  scheme/2x4.meta:n={
    row sep=2,
    pattern=X---,
    aisle restarts scheme=true,
    row restart after=100
  },
  scheme/3x4.meta:n={
    row sep=3,
    pattern=X---,
    aisle restarts scheme=true,
    row restart after=100
  },
  scheme/sixpack-.meta:n={
    row sep=2,
    pattern=X--,
    aisle restarts scheme=true,
    row restart after=3
  },
  scheme/2x2-.meta:n={
    row sep=2,
    pattern=X-,
    aisle restarts scheme=true,
    row restart after=3
  },
  scheme/dense.meta:n={
    scheme=2x2-
  }
}

\NewDocumentCommand{\tucsConfigScheme}{m}{
  \SetKeys[tucsseatingscheme]{#1}
}

\NewDocumentCommand{\tucsSeatingScheme}{s o m}{
  \IfValueT{#2}{%
    \SetKeys[tucsseatingscheme]{#2}
  }%
  \IfBooleanTF{#1}{  %
    \SetKeys[tucsseatingscheme]{pattern=#3}
  }{%
    \SetKeys[tucsseatingscheme]{scheme=#3}
  }%
  \def\tucspolicy{
    {["aisle~restarts"]=\tss@aislerestart,
      ["rtol"]=\tss@rtol,
      ["aisle counts"]=\tss@aislecnt,
      ["aisle restarts scheme"]=\tss@aislecnt,
      ["ignore removed seats"]=\tss@ignoreremoved,
      ["row sep"]=\tss@rowsep,
      ["row restart"]=\tss@rowrestart,
      ["first row"]=\tss@startrow,
      ["last row"]=\tss@endrow,
      ["label text"]=\luastringO{\tss@as@format}
    }}
  %\typeout{POLICY=\tucspolicy, startrow=\tss@startrow\ endrow=\tss@endrow}
  \luadirect{seatingSchemeInRows(\luastring{\tss@pattern},\tucspolicy)}
}

\NewDocumentCommand\writetolog{m m}{%
  \setbox0\hbox{#2}%
  \directlua{
    -- tex.sprint("\typeout{******* writetolog called}")
    seatlogfile = io.open(\luastring{#1}, "a")
    for n in node.traverse(tex.box[0].head) do
      -- tex.sprint("\typeout{*** id=",n.id,"}")
      if n.id==13 or n.id==12 or n.id==11 then seatlogfile:write (" ") end
      if n.id==29 then seatlogfile:write(string.char(n.char)) end
    end
    seatlogfile:write(string.char(10))
    seatlogfile:close()
}}
\ExplSyntaxOn

\newtoggle{tucs@formatother}
\newcommand\tucs@format@label[6]{%
  %\typeout{**** try #6}
  \togglefalse{tucs@formatother}
  % absolut row, arabic:  m
  % absolut row, alpha:   a 
  % absolut row, Alpha:   A
  % absolut row, roman:   y
  % absolut row, Roman:   Y
  % running row, arabic:  r
  % running row, alpha:   b
  % running row, Alpha:   B
  % running row, roman:   i
  % running row, Roman:   I
  % absolut seat, arabic: n
  % absolut seat, alpha:  c
  % absolut seat, Alpha:  C
  % absolut seat, roman:  x
  % absolut seat, Roman:  X
  % running seat, arabic: s
  % running seat, alpha:  d
  % running seat, Alpha:  D
  % running seat, roman:  j
  % running seat, Roman:  J
  % Label:                l
  \regex_match_case:nnTF{
    {\cB.}{#6}% match all groups
    {m}{#1}
    {a}{\int_to_alph:n{#1}}
    {A}{\int_to_Alph:n{#1}}
    {y}{\int_to_roman:n{#1}}
    {Y}{\int_to_Roman:n{#1}}
    {r}{#3}
    {b}{\int_to_alph:n{#3}}
    {B}{\int_to_Alph:n{#3}}
    {i}{\int_to_roman:n{#3}}
    {I}{\int_to_Roman:n{#3}}
    {n}{#2}
    {c}{\int_to_alph:n{#2}}
    {C}{\int_to_Alph:n{#2}}
    {x}{\int_to_roman:n{#2}}
    {X}{\int_to_Roman:n{#2}}
    {s}{#4}
    {d}{\int_to_alph:n{#4}}
    {D}{\int_to_Alph:n{#4}}
    {j}{\int_to_roman:n{#4}}
    {J}{\int_to_Roman:n{#4}}
    {l}{#5}
  }{#6}{}{%
    \PackageWarningNoLine{\packagename}{Unknown~formating~character '#6'}%
  }
}

\NewDocumentCommand{\tucsassignedlabelformat}{o m m m m m}{
  % #2: absolute row
  % #3: absolute seat
  % #4: running row
  % #5: running seat
  % #6: text
  \IfValueTF{#1}{%
    \def\tucs@format{#1}%
  }{%
    \def\tucs@format{#6}
  }%
  %\typeout{*** Format: \tucs@format}
  \expandafter\tl_map_tokens:Nn{\tucs@format}{\tucs@format@label{#2}{#3}{#4}{#5}{#6}}
  
}
\NewDocumentCommand{\tucemptylabelformat}{m m m m m}{
  % #2: absolute row
  % #3: absolute seat
  % #4: running row
  % #5: running seat
  % #6: text
}
\ExplSyntaxOff

\newcommand{\tucsrownumformat}[1]{%
  #1
}

\ifboolexpr{
       test {\ifnumcomp{\tucs@rows}{<}{1}} or
       test {\ifnumcomp{\tucs@seatsperrow}{<}{1}}
}{
  \PackageError{\packagename}{Invalid layout option:\MessageBreak
    number of rows or number of seats per row can't be smaller than 1}{
    Use correct layout options}
}{}

\RequirePackage{tikz}
\usetikzlibrary{shapes.geometric}
\iftoggle{tucs@room}{}{
  \tucsInitSeating
}
