%% -----------------------------------------------------------
%% Package:     tucseating
%% Version:     v0.1 (2025-07-04)
%% Author:      Matthias Werner
%% Description: Seatings schemes (for Chemnitz
%%              University of Technology)
%% License:     GPLv3
%% -----------------------------------------------------------
\NeedsTeXFormat{LaTeX2e}[2022-06-01]
\def\packagename{tucseating}
\def\packagedate{2025-07-04}
\def\packageversion{0.1}
\ProvidesPackage{\packagename}[\packagedate\space \packageversion]
\RequirePackage{xstring}
\RequirePackage{translator}
\IfFormatAtLeastTF{2022/06/01}{}{
  \PackageError{\packagename}{
    \packagename requires at least the TeX format \MessageBreak
    from 2022/06. \MessageBreak
  }{Update your LaTeX.}
}
\RequirePackage{etoolbox}
\ExplSyntaxOn
\sys_if_engine_luatex:TF{}{
 \PackageError{\packagename}{
   LuaLaTeX~is~required~to~use~this~package.\MessageBreak
   Sorry!
}{Use~LuaLaTex.} 
}
\RequirePackage{luacode}
\ExplSyntaxOff
\let\IfToggle=\iftoggle
\newtoggle{tucs@rectshapt}
\newtoggle{tucs@rnleft}
\newtoggle{tucs@rnright}
\newtoggle{tucs@room}
\DeclareKeys[tucseating]{
  room.choice:,
  room/unknown.code:n={
    \PackageError{\packagename}{
      Room #1 is not in the database}{Check if the room name is correct or define an own room.}
  },
  room.usage = load,
  init.code:n={
    \toggletrue{tucs@room}
    \tucsInitSeating
  },
  init.usage = load,
  remove.code:n = {%
    \removeSeats{#1}
  },
  remove.usage = preamble,
  shape.choice:,
  shape/arc.code:n = {\togglefalse{tucs@rectshapt}},
  shape/rectangle.code:n = {\toggletrue{tucs@rectshapt}},
  shape.usage = preamble,
  shape.initial:n = rectangle,
  rows.store = \tucs@rows,
  rows.usage = preamble,
  rows.initial:n = 0,
  seats per row.store = \tucs@seatsperrow,
  seats per row.usage = preamble,
  seats per row.initial:n = 0,
  aisle.code:n={
    \keySetAisle{#1}
  },
  blackboard.if = tucs@blackboard,
  blackboard.initial:n = false,
  rownumbers.choice:,
  rownumbers/left.code = { \toggletrue{tucs@rnleft} },
  rownumbers/right.code = { \toggletrue{tucs@rnright} },
  rownumbers/both.code:n = {
    \toggletrue{tucs@rnleft}\toggletrue{tucs@rnright}
  },
  rownumbers/none.code:n = {
    \togglefalse{tucs@rnleft}\togglefalse{tucs@rnright}
  },
  seat x distance.store =\tucs@sdist@x,
  seat y distance.store =\tucs@sdist@y,
  seat distance.meta:n = {
    seat x distance=#1,
    seat y distance=#1
  },
  seat distance.initial:n=2pt,
  rownumbers.initial:n = none,
  rownumber distance.store= \tucs@rnsep,
  rownumber distance.initial:n = 2pt,
  rownumber font.store = \tucs@rnfont,
  rownumber font.initial:n = \tiny,
  rownumber color.store = \tucs@rncolor,
  rownumber color.initial:n = darkgray,
  empty seat background color.store =\tucs@sc@empty,
  empty seat background color.initial:n = lightgray!20,
  empty seat border color.store = \tucs@sc@emptyborder,
  empty seat border color.initial:n = lightgray,
  empty seat label color.store = \tucs@sc@emptytext,
  empty seat label color.initial:n = lightgray!30,
  empty seat label font.store = \tucs@s@emptyfont,
  assigned seat background color.store = \tucs@sc@assigned,
  assigned seat background color.initial:n = lightgray!30,
  assigned seat border color.store = \tucs@sc@assignedborder,
  assigned seat border color.initial:n = black,
  assigned seat label color.store = \tucs@sc@assignedtext,
  assigned seat label color.initial:n = black,
  assigned seat label font.store = \tucs@s@assignedfont,
  seat background color.meta:n = {
    empty seat background color=#1,
    assigned seat background color =#1
  },
  seat label color.meta:n = {
    empty seat label color = #1,
    assigned seat label color = #1
  },
  seat border color.meta:n = {
    empty seat border color = #1,
    assigned seat border color = #1
  },
  seat label font.meta:n = {
  },
  seat label font.initial:n = \small,
  seat label font.meta:n = {
    empty seat label font=#1,
    assigned seat label font = #1
  }
}
\NewDocumentCommand{\tucsDeclareRoom}{m m}{%
  \toggletrue{tucs@room}
  \DeclareKeys[tucseating]{room/#1.meta:n={#2}}%
}
\NewDocumentCommand{\removeSeatAt}{m m}{
  \luadirect{removeSeatAt(#1,#2)}
}
\NewDocumentCommand{\tucs@removeSeat}{>{\SplitArgument{1}{,}}m}{
  \removeSeatAt#1
}
\NewDocumentCommand{\removeSeats}{>{\SplitList{,}} m}{
  \ProcessList{#1}{\tucs@removeSeat}
} 
\NewDocumentCommand{\assignSeatAt}{m m m}{
  \luadirect{assignSeatAt(#1,#2,\luastring{#3})}
}
\NewDocumentCommand{\tucs@ParseRows}{m}{
}
\def\tucs@parserange#1-#2\relax{%
  \def\@firstval{\ifx\relax#1\relax1\else#1\fi}%
  \def\@lastval{\ifx\relax#2\relax\tucs@rows\else#2\fi}%
}
\newcommand{\keySetAisle}[1]{
  \setAisle[-]{#1}
}
\NewDocumentCommand{\setAisle}{O{-}m}{%
  \begingroup
  \edef\@tmp{#1}%
  \expandafter\tucs@parserange\@tmp\relax
  \luadirect{removeAisle(#2,\@firstval,\@lastval)}
  \endgroup
}
\NewDocumentCommand{\tucsInitSeating}{}{
  \luadirect{require("tucseating.lua")}
  \iftoggle{tucs@rectshapt}{
    \luadirect{initSeating(\tucs@rows,\tucs@seatsperrow,\luastring{rect})}
  }{
  \luadirect{initSeating(\tucs@rows,\tucs@seatsperrow,\luastring{arc})}
  }
}
\InputIfFileExists{rooms1.tsr}{\typeout{**** READING ROOMS}}{}

% defaults

\ProcessKeyOptions

\NewDocumentCommand{\tucsConfig}{m}{
  \SetKeys[tucseating]{#1}%
  \tucs@configtikz%
}

\newcommand\tucs@configtikz{
  \tikzset{
    empty seat/.style={
      draw=\tucs@sc@emptyborder,
      fill=\tucs@sc@empty,
      font=\tucs@s@emptyfont,
      text=\tucs@sc@empty,
      inner sep=0pt
    },
    empty label/.style={
      text=\tucs@sc@emptytext,
      font=\tucs@s@emptyfont
    },
    assigned seat/.style={
      draw=\tucs@sc@assignedborder,
      fill=\tucs@sc@assigned,
      text=\tucs@sc@assigned,
      font=\tucs@s@assignedfont,
      inner sep=0pt
    },
    assigned label/.style={
      text=\tucs@sc@assignedtext,
      font=\tucs@s@assignedfont
    },
    rownumber/.style={
      font=\tucs@rnfont,
      text=\tucs@rncolor,
      anchor=east
    }
  }
}
\NewDocumentCommand{\tucsDrawSeating}{sO{}}{
  \tucs@configtikz
  \newlength\tucsseatwidth
  \newlength\tucsseatheight
  \newlength\tucsremainingspace
  \newlength\tucsrnlength
  \IfBooleanTF{#1}{% ToDo: API for user
    \settowidth{\tucsseatwidth}{xxx}
    \settoheight{\tucsseatheight}{Xy}
  }{
    \setlength{\tucsremainingspace}{\linewidth}
      \settowidth{\tucsrnlength}{\tucsrownumformat{99}}
 %   \iftoggle{tucs@rectshapt}{
      % \typeout{Linewidth: \the\linewidth}
      % \typeout{Numswidth: \the\tucsrnlength}
      \iftoggle{tucs@rnleft}{\addtolength{\tucsremainingspace}{\dimeval{-\tucsrnlength-\tucs@rnsep}}}{}
      \iftoggle{tucs@rnright}{\addtolength{\tucsremainingspace}{\dimeval{-\tucsrnlength-\tucs@rnsep}}}{}
      % \typeout{Remaining: \the\tucsremainingspace}
      \setlength{\tucsseatwidth}{\dimeval{\tucsremainingspace/(\tucs@seatsperrow) - \tucs@sdist@x}}
      % \typeout{Seatwidth: \the\tucsseatwidth}
      % \typeout{total: \dimeval{(\tucsseatwidth+2pt)*\tucs@seatsperrow + \tucsrnlength*2 + \tucs@rnsep*2}}
      \setlength{\tucsremainingspace}{\dimeval{\pagegoal-\pagetotal}}
      \setlength{\tucsseatheight}{\dimeval{\tucsremainingspace/(\tucs@rows + 2) -
          \tucs@sdist@y}}
 %   }{ % else: arc
       
  %  }
      % A seat that is deeper than it is wide looks a bit silly.
    \ifdimcomp{\tucsseatheight}{>}{\tucsseatwidth}{\setlength{\tucsseatheight}{\tucsseatwidth}}{}
  }
  \luadirect{seatDim(\luastring{\tucsseatwidth},\luastring{\tucsseatheight})}
  \begin{tikzpicture}[x=\tucsseatwidth+\tucs@sdist@x,y=\tucsseatheight+\tucs@sdist@y,#2]
      \iftucs@blackboard
          \node[rectangle, draw,minimum width=0.4\textwidth] at (0,-2) {Tafel};
      \fi
      \iftoggle{tucs@rnleft}{
            \foreach \r in {1,..., \tucs@rows} {
              \node[rownumber,xshift=-\fpeval{\tucsseatwidth/2+\tucs@rnsep}] at (\fpeval{(1-\tucs@seatsperrow)/2},\r-1) {\tucsrownumformat{\r}};
            }
          }{}
     \iftoggle{tucs@rnright}{
            \foreach \r in {1,..., \tucs@rows} {
              \node[rownumber,xshift=\fpeval{\tucsseatwidth/2+\tucs@rnsep+\tucsrnlength}] at (\fpeval{(\tucs@seatsperrow-1)/2},\r-1) {\tucsrownumformat{\r}};
            }
          }{}
      \luadirect{drawSeats()}
    \end{tikzpicture}
}

\DeclareKeys[tucsseatingscheme]{
  row sep.store = \tss@rowsep,
  row sep.initial:n = 2,
  col sep.store = \tss@colsep,
  col sep.initial:n = 2,
  start row.store = \tss@startrow,
  start row.initial:n=1,
  end row.store = \tss@endrow,
  end row.initial:n = \tucs@rows,
  row restart after.store= \tss@rowrestart,
  row restart after.initial:n = 100,%should be sufficient
  aisle counts.store = \tss@aislecnt,
  aisle counts.initial:n = 1,
  aisle restarts scheme.choice:,
  aisle restarts scheme/true.store=\tss@aislerestart,
  aisle restarts scheme/false.store=\tss@aislerestart,
  aisle restarts scheme.default:n = true,
  aisle restarts scheme.initial:n = false,
  ignore aisle.meta:n = {
    aisle counts=0
  },
  rtol.choice:,
  rtol/true.store = \tss@rtol,
  rtol/false.store = \tss@rtol,,
  rtol.default:n = true,
  rtol.initial:n = false,
  in rows.code:n = {% ToDo!
  },
  ignore removed seats.choice:,
  ignore removed seats/true.store=\tss@ignoreremoved,
  ignore removed seats/false.store=\tss@ignoreremoved,
  ignore removed seats.default:n = true,
  ignore removed seats.initial:n = false,
  pattern.store=\tss@pattern,
  scheme.choice:,
  scheme/simple.meta:n={
    row sep=2,
    pattern=X-,
    aisle restarts scheme=true,
    row restart after=100
  },
  scheme/2x2.meta:n={
    scheme=simple
  },
  scheme/sixpack.meta:n={
    row sep=2,
    pattern=X--,
    aisle restarts scheme=true,
    row restart after=100
  },
  scheme/2x3.meta:n={
    scheme=sixpack
  },
  scheme/sixpack-.meta:n={
    row sep=2,
    pattern=X--,
    aisle restarts scheme=true,
    row restart after=3
  },
  scheme/dense.meta:n={
    row sep=2,
    pattern=X-,
    aisle restarts scheme=true,
    row restart after=3
  },
  scheme/2x2-.meta:n={
    scheme=dense
  }
}

\NewDocumentCommand{\setupSeatingScheme}{m}{
  \SetKeys[tucsseatingscheme]{#1}
}

\NewDocumentCommand{\tucsSeatingScheme}{s o m}{
  \IfValueT{#2}{
    \typeout{*** Set #2}
    \SetKeys[tucsseatingscheme]{#2}
  }
  \IfBooleanTF{#1}{  %
    \SetKeys[tucsseatingscheme]{pattern=#3}
  }{%
    \SetKeys[tucsseatingscheme]{scheme=#3}
  }%
  \def\tucspolicy{
    {["aisle restarts"]=\tss@aislerestart,
      ["rtol"]=\tss@rtol,
      ["aisle counts"]=\tss@aislecnt,
      ["ignore removed seats"]=\tss@ignoreremoved,
      ["row sep"]=\tss@rowsep,
      ["row restart"]=\tss@rowrestart,
      ["first row"]=\tss@startrow,
      ["last row"]=\tss@endrow
    }}
  \typeout{POLICY=\tucspolicy, startrow=\tss@startrow\ endrow=\tss@endrow}
  \luadirect{seatingSchemeInRows(\luastring{\tss@pattern},\tucspolicy)}
}
\ExplSyntaxOn
\newcommand{\inttoalph}[1]{
  \int_to_alph:n{#1}
}
\newcommand{\inttoAlph}[1]{
  \MakeUppercase{\int_to_alph:n{#1}}
}
\ExplSyntaxOff

\NewDocumentCommand{\tucsassignedlabelformat}{O{} m m m m m}{
  % #1: absolute row
  % #2: absolute seat
  % #3: running row
  % #4: running seat
  % #5: text
  
  {#1}-\inttoAlph{#4}
}
\NewDocumentCommand{\tucemptylabelformat}{m m m m m}{
  % #1: absolute row
  % #2: absolute seat
  % #3: running row
  % #4: running seat
  % #5: text
}

\newcommand{\tucsrownumformat}[1]{%
  #1
}

% Now we can start.
% Check...
% ... if there exist a layout
\ifboolexpr{
      (test {\ifnumcomp{\tucs@rows}{=}{0}} or
       test {\ifnumcomp{\tucs@seatsperrow}{=}{0}}
      ) and not togl {tucs@room}         
}{
  \PackageError{\packagename}{
    No room is set up}{
    Provide room layout}
}{}
% \IfToggle{tucs@room}{
%   % .. if the room file exist
%   \InputIfFileExists{\tucs@room.tsr}{
%     % ... if room *and* layout options are given
%     \ifboolexpr{
%           test {\ifnumcomp{\tucs@rows}{>}{0}} or
%           test {\ifnumcomp{\tucs@seatsperrow}{>}{0}}
%     }{
%       \PackageWarningNoLine{\packagename}{You provided room as well as layout
%         option(s).\MessageBreak
%         The later will be ignored}
%     }{}
%   }{
%        \PackageError{\packagename}{Can't open file '\tucs@room.tsr'}{Check if the room is
%          correct.}
%    }
% }{}
% ... for usefull layout parameter
\ifboolexpr{
       test {\ifnumcomp{\tucs@rows}{<}{1}} or
       test {\ifnumcomp{\tucs@seatsperrow}{<}{1}}
}{
  \PackageError{\packagename}{Invalid layout option:\MessageBreak
    number of rows or number of seats per row can't be smaller than 1}{
    Use correct layout options}
}{}
 
\RequirePackage{tikz}
\usetikzlibrary{shapes.geometric}
